{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Your pets",
    "description": "API to your pets",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "http://localhost:3000" },
    { "url": "https://yourpets-project-backend.onrender.com" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Users",
      "description": "User endpoints"
    },
    {
      "name": "Notices",
      "description": "Notices endpoints"
    },
    {
      "name": "Pets",
      "description": "Pets endpoints"
    },
    {
      "name": "News",
      "description": "News endpoints"
    },
    {
      "name": "Friends",
      "description": "Friends endpoints"
    }
  ],

  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "409": {
            "description": "This email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailInUseError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "requestBody": {
          "description": "Login's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid user data when trying to log in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "security": [{ "Bearer": [] }],

        "responses": {
          "204": {
            "description": "Logout successful",
            "content": {}
          },
          "401": {
            "description": "Unauthorized (Invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Get current user",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "patch": {
        "tags": ["Users"],
        "consumes": ["multipart/form-data"],
        "summary": "Update user's data",
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "User's data object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sucessful update operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Not autorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/notices": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get notices list",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number",
            "required": false,
            "example": "2"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page",
            "required": false,
            "example": "12"
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Category of notices",
            "required": false,
            "example": "sell, lost-found, in-good-hands"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search for notices by keyword",
            "example": "Пес Барбос",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoticesListResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Notices"],
        "summary": "Add ",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Notice's pet data object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddNoticeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation of adding a notice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNoticeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Headers of user requests are missing a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/notices/{noticeId}": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get notice By ID",
        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "type": "string",
            "required": true,
            "description": "Notice ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNoticeByIdResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Notices"],
        "summary": "Delete notce by Id",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "required": true,
            "type": "string",
            "description": "Notice ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete own notice by Id",
            "content": {
              "aplication/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteNoticeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Headers of user requests are missing a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/notices/own": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get own user notices",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number",
            "example": "2"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page",
            "example": "12"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoticesListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Headers of user requests are missing a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/notices/favorite": {
      "get": {
        "tags": ["Notices"],
        "summary": "Get favorite notices",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number",
            "example": "2"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page",
            "example": "12"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search for notices by keyword",
            "example": "Пес Барбос",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoticesListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/notices/favorite/{noticeId}": {
      "patch": {
        "tags": ["Notices"],
        "summary": "Add notice to favorites",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "required": true,
            "type": "string",
            "description": "Notice ID"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfuly added to favorites",
            "content": {
              "aplication/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNoticeToFavorites"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Notices"],
        "summary": "Delete notice from favorites",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "noticeId",
            "required": true,
            "type": "string",
            "description": "Notice ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteNoticeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/pets": {
      "get": {
        "tags": ["Pets"],
        "summary": "Get list own pets",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPetsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (Invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Pets"],
        "summary": "Add new pet",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Pet`s data object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddPetRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation of adding a pet",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddNoticeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Headers of user requests are missing a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        }
      }
    },
    "/pets/{petsId}": {
      "delete": {
        "tags": ["Pets"],
        "summary": "Delete pet by Id",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Pet ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete pet by Id",
            "content": {
              "aplication/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteNoticeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Headers of user requests are missing a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/news": {
      "get": {
        "tags": ["News"],
        "summary": "Get news list",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "Page number",
            "example": "2",
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "Number of items per page",
            "required": false,
            "example": "12"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search for notices by keyword",
            "example": "About cats",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNewsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/friends": {
      "get": {
        "tags": ["Friends"],
        "summary": "Get friends list",

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFriendsResponse"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Jhon"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "description": "User",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name",
                "example": "Jhon"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          },
          "token": {
            "type": "string",
            "description": "User's access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NTdkNjBiNDRhNmQwOTYzMWNhYzVmYiIsImlhdCI6MTcwMDI1NTI0MywiZXhwIjoxNzAwMzM4MDQzfQ.LiWHj5BsjEWGWZizrVsuGqxc_hTEliPanbIyFssiu7o"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Invalid user data when trying to log in",
            "example": "Email or password is wrong"
          }
        }
      },
      "LogoutRequest": {
        "type": "object",
        "description": "Logout request without any content"
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Logout successful",
            "example": "Logout successful"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Username",
            "example": "Boby"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user@example.com"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "User's birthday in format YYYY-MM-DD",
            "example": "2000-01-01"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+380000000000"
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Kherson"
          },
          "avatar": {
            "type": "string",
            "description": "URL to user's avatar image",
            "required": true,
            "format": "binary"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's Id",
            "example": "6559154b6ec175bb9e83b5e8"
          },
          "name": {
            "type": "string",
            "description": "Username",
            "example": "Boby"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "example": "user@example.com"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+380000000000"
          },
          "birthday": {
            "type": "string",
            "format": "date",
            "description": "User's birthday in format YYYY-MM-DD",
            "example": "1990-01-01"
          },
          "city": {
            "type": "string",
            "description": "User's city",
            "example": "Lviv"
          },
          "avatarURL": {
            "type": "string",
            "description": "The URL to the user's avatar",
            "example": "www.gravatar.com/avatar/9f947d80dcde0d8bdc7c3bb66e82e6c7"
          },
          "favourites": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Cards's Id",
              "example": "6559154b6ec175bb9e83b5e8"
            }
          }
        }
      },
      "NoticesListResponse": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total notices",
            "example": 1
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Notice's ID",
                  "example": "02aa6jyt15cs5e00020qw24d"
                },
                "noticeType": {
                  "type": "string",
                  "description": "Notice's type",
                  "example": "in good hands"
                },
                "title": {
                  "type": "string",
                  "description": "Notice's title",
                  "example": "Cute kitten looking for a home"
                },
                "sex": {
                  "type": "string",
                  "description": "Pet's sex",
                  "example": "male"
                },
                "location": {
                  "type": "string",
                  "description": "Notice's location",
                  "example": "Kiev"
                },
                "photoURL": {
                  "type": "string",
                  "description": "Pet's photo in notice",
                  "example": "https://res.cloudinary.com/doe8sk18b/image/upload/v1690028176/wwesmackd0wnq24wwa25.jpg"
                },
                "age": {
                  "type": "string",
                  "description": "Pet age",
                  "example": "4 years"
                },
                "favourites": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "User's Id",
                    "example": "6559154b6ec175bb9e83b5e8"
                  }
                },
                "owner": {
                  "type": "string",
                  "description": "Owner's ID",
                  "example": "6559154b6ec175bb9e83b5e8"
                }
              }
            }
          }
        }
      },
      "AddNoticeRequest": {
        "type": "object",
        "required": [
          "noticeType",
          "title",
          "name",
          "birthday",
          "petType",
          "sex",
          "location",
          "price",
          "comments",
          "photo"
        ],
        "properties": {
          "noticeType": {
            "type": "string",
            "description": "one of: sell, lost-found, in-good-hands",
            "example": "sell"
          },
          "title": {
            "type": "string",
            "description": "Notice's title",
            "example": "Cute dog looking for a home"
          },
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Rich"
          },
          "birthday": {
            "type": "string",
            "description": "Pet's birthday in format YYYY-MM-DD",
            "example": "2020-09-21"
          },
          "petType": {
            "type": "string",
            "description": "Pet's type",
            "example": "Pomeranian"
          },
          "sex": {
            "type": "string",
            "description": "Pet's sex",
            "example": "male"
          },
          "location": {
            "type": "string",
            "description": "Notice's location",
            "example": "Lviv"
          },
          "price": {
            "type": "integer",
            "description": "Notice's price (Available only if type of notice equal sell)",
            "example": 12500
          },
          "comments": {
            "type": "string",
            "description": "Notice's comment",
            "example": "Rich would be the perfect addition to an active family that loves to play and go on walks. I bet he would love having a doggy playmate too!"
          },
          "photo": {
            "type": "string",
            "description": "URL to user's avatar image",
            "required": true,
            "format": "binary"
          }
        }
      },
      "AddNoticeResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Successful operation",
            "example": "Your notice has been added"
          }
        }
      },
      "GetNoticeByIdResponse": {
        "type": "object",
        "properties": {
          "notice": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "description": "Pet's id",
                "example": "02aa6jyt15cs5e00020qw24d"
              },
              "noticeType": {
                "type": "string",
                "description": "Notice's type",
                "example": "sell"
              },
              "title": {
                "type": "string",
                "description": "Notice's title",
                "example": "Cute dog looking for a home"
              },
              "name": {
                "type": "string",
                "description": "Pet's name",
                "example": "Barsik"
              },
              "birthday": {
                "type": "string",
                "description": "Pet's birthday in format YYYY-MM-DD",
                "example": "2021-12-12"
              },
              "petType": {
                "type": "string",
                "description": "Pet's type",
                "example": "Pomeranian"
              },
              "sex": {
                "type": "string",
                "description": "Pet's sex",
                "example": "male"
              },
              "location": {
                "type": "string",
                "description": "Notice's location",
                "example": "Lviv"
              },
              "price": {
                "type": "integer",
                "description": "Notice's price (Available only if type of notice equal sell)",
                "example": 1250
              },
              "comments": {
                "type": "string",
                "description": "Notice's comment",
                "example": "Rich would be the perfect addition to an active family that loves to play and go on walks. I bet he would love having a doggy playmate too!"
              },
              "photoURL": {
                "type": "string",
                "description": "Pet's photo in notice",
                "example": "https://res.cloudinary.com/doe8sk18b/image/upload/v1690028176/wwesmackd0wnq24wwap0e.jpg"
              },
              "favorite": {
                "type": "integer",
                "description": "Number of users who have favorited this notification",
                "example": "1"
              },
              "favourites": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "User's Id",
                  "example": "6559154b6ec175bb9e83b5e8"
                }
              },
              "owner": {
                "type": "string",
                "description": "Owner's ID",
                "example": "6559154b6ec175bb9e83b5e8"
              },
              "ownerEmail": {
                "type": "string",
                "description": "Owner's email",
                "example": "testswag@example.com"
              },
              "ownerPhone": {
                "type": "string",
                "description": "Owner's phone",
                "example": "+380631234567"
              }
            }
          }
        }
      },
      "DeleteNoticeResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Delete successfully"
          }
        }
      },
      "AddNoticeToFavoriteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Success"
          }
        }
      },
      "GetPetsResponse": {
        "type": "object",
        "properties": {
          "pets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Pet Id",
                  "example": "02aa6jyt15cs5e00020qw24d"
                },
                "name": {
                  "type": "string",
                  "description": "Pet's name",
                  "example": "Barsik"
                },
                "birthday": {
                  "type": "string",
                  "description": "Pet's birthday in format YYYY-MM-DD",
                  "example": "2017-05-15"
                },
                "type": {
                  "type": "string",
                  "description": "Pet's type (e.g., Persian cat, Basenji, Pomeranian, Pug)",
                  "example": "French bulldog"
                },
                "comments": {
                  "type": "string",
                  "description": "Additional comments about the pet",
                  "example": "A playful and friendly dog."
                },
                "photoURL": {
                  "type": "string",
                  "description": "URL to the pet's photo",
                  "example": "https://res.cloudinary.com/doe8sk18b/image/upload/v1690028176/wwesmackd0wnq24wwap0e.jpg"
                }
              }
            }
          }
        }
      },
      "AddPetRequest": {
        "type": "object",
        "required": ["name", "birthday", "type", "sex", "photo"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Murka"
          },
          "birthday": {
            "type": "string",
            "description": "Pet's birthday in format DD-MM-YYYY",
            "example": "15-05-2017"
          },
          "type": {
            "type": "string",
            "description": "Pet's type (e.g., Persian cat, Basenji, Pomeranian, Pug)",
            "example": "Persian cat"
          },
          "photo": {
            "type": "string",
            "description": "URL to user's avatar image",
            "required": true,
            "format": "binary"
          },
          "comments": {
            "type": "string",
            "description": "Pet's comment",
            "example": "Rich would be the perfect addition to an active family that loves to play and go on walks. I bet he would love having a doggy playmate too!"
          }
        }
      },
      "GetNewsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "imgUrl": {
              "type": "string",
              "description": "Image URL",
              "example": "https://www.nytimes.com/images/2023/04/16/magazine/16mag-LOR/16mag-LOR-blog480.jpg"
            },
            "title": {
              "type": "string",
              "description": "Title",
              "example": "What I Learned Dogsitting for New York City’s Opulent Elite"
            },
            "text": {
              "type": "string",
              "description": "New's text",
              "example": "In a city of yawning class inequality, some side hustles let you glimpse how the other half lives."
            },
            "date": {
              "type": "string",
              "description": "New's creation date",
              "example": "I2023-04-11T09:00:18+0000"
            },
            "url": {
              "type": "string",
              "description": "New's URL",
              "example": "https://www.nytimes.com/2023/04/11/magazine/dogsitting-rich-new-york.html"
            },
            "id": {
              "type": "string",
              "description": "Notice's ID",
              "example": "nyt://article/8d29f1fc-d146-509d-8ceb-5a5b17d7886b"
            }
          }
        }
      },
      "GetFriendsResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Partner's Title",
              "example": "Shelter for homeless animals 'Sirius'"
            },
            "url": {
              "type": "string",
              "description": "Partner's URL",
              "example": "https://dogcat.com.ua"
            },
            "addressUrl": {
              "type": "string",
              "description": "Partner's address URL",
              "example": "https://goo.gl/maps/iq8NXEUf31EAQCzc6"
            },
            "imageUrl": {
              "type": "string",
              "description": "Image URL",
              "example": "https://storage.googleapis.com/kidslikev2_bucket/pets-support/images/sponsors/frame_287.png"
            },
            "address": {
              "type": "string",
              "description": "Partner's address",
              "example": "Fedorivka, Kyiv Oblast, Ukraine, 07372"
            },
            "workDays": {
              "type": "array",
              "description": "The work days of the organization",
              "items": {
                "type": "object",
                "properties": {
                  "isOpen": {
                    "type": "boolean",
                    "description": "Indicates if the organization is open on this day"
                  },
                  "from": {
                    "type": "string",
                    "description": "The opening time of the organization (e.g., '09:00')"
                  },
                  "to": {
                    "type": "string",
                    "description": "The closing time of the organization (e.g., '17:00')"
                  }
                },
                "example": {
                  "isOpen": false
                }
              },
              "example": [
                { "isOpen": true, "from": "09:00", "to": "20:00" },
                { "isOpen": true, "from": "09:00", "to": "20:00" },
                { "isOpen": true, "from": "09:00", "to": "20:00" },
                { "isOpen": true, "from": "09:00", "to": "20:00" },
                { "isOpen": true, "from": "09:00", "to": "20:00" },
                { "isOpen": true, "from": "09:00", "to": "20:00" },
                { "isOpen": true, "from": "09:00", "to": "20:00" }
              ]
            },
            "phone": {
              "type": "string",
              "description": "Partner's text",
              "example": "+380931934069"
            },
            "email": {
              "type": "string",
              "description": "Parnter's emai;",
              "example": "dogcat.sirius.example@gmail.com"
            }
          }
        }
      },
      "NotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message for error code 404",
            "example": "Not found"
          }
        }
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message for error code 401",
            "example": "Unauthorized"
          }
        }
      },
      "BadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message for error code 400",
            "example": "Bad request"
          }
        }
      },
      "EmailInUseError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Response message for error code 409",
            "example": "Email already in use"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
